/* DO NOT EDIT THIS FILE - it is machine generated *//* Generated for class gnu.io.RXTXPort *//* Generated from RXTXPort.java*/#ifndef _Included_gnu_io_RXTXPort#define _Included_gnu_io_RXTXPort#include <jni.h>#ifdef __cplusplusextern "C" {#endif/**	 An extension of javax.comm.SerialPort	 @see javax.comm.SerialPort*//* * Class:     gnu_io_RXTXPort * Method:    Initialize * Signature: ()V *//**	Initialize the native library*/JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_Initialize	(JNIEnv *, jclass);/* * Class:     gnu_io_RXTXPort * Method:    open * Signature: (Ljava/lang/String;)I */JNIEXPORT jint JNICALL Java_gnu_io_RXTXPort_open	(JNIEnv *, jobject, jstring);/* * Class:     gnu_io_RXTXPort * Method:    nativeSetSerialPortParams * Signature: (IIII)V *//**	Set the native serial port parameters*/JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_nativeSetSerialPortParams	(JNIEnv *, jobject, jint, jint, jint, jint);/* * Class:     gnu_io_RXTXPort * Method:    setflowcontrol * Signature: (I)V */JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_setflowcontrol	(JNIEnv *, jobject, jint);/* * Class:     gnu_io_RXTXPort * Method:    NativegetReceiveTimeout * Signature: ()I *//**	  @return  int the timeout*/JNIEXPORT jint JNICALL Java_gnu_io_RXTXPort_NativegetReceiveTimeout	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    NativeisReceiveTimeoutEnabled * Signature: ()Z *//**	  @return  bloolean true if recieve timeout is enabled*/JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_NativeisReceiveTimeoutEnabled	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    NativeEnableReceiveTimeoutThreshold * Signature: (III)V *//**	  @param  time	  @param  threshold	  @param  InputBuffer*/JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_NativeEnableReceiveTimeoutThreshold	(JNIEnv *, jobject, jint, jint, jint);/* * Class:     gnu_io_RXTXPort * Method:    isDTR * Signature: ()Z *//**	  @returns true if DTR is set*/JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_isDTR	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    setDTR * Signature: (Z)V *//**	  @param state*/JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_setDTR	(JNIEnv *, jobject, jboolean);/* * Class:     gnu_io_RXTXPort * Method:    setRTS * Signature: (Z)V *//**	  @param state*/JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_setRTS	(JNIEnv *, jobject, jboolean);/* * Class:     gnu_io_RXTXPort * Method:    setDSR * Signature: (Z)V */JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_setDSR	(JNIEnv *, jobject, jboolean);/* * Class:     gnu_io_RXTXPort * Method:    isCTS * Signature: ()Z *//**	  @return boolean true if CTS is set*/JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_isCTS	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    isDSR * Signature: ()Z *//**	  @return boolean true if DSR is set*/JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_isDSR	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    isCD * Signature: ()Z *//**	  @return boolean true if CD is set*/JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_isCD	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    isRI * Signature: ()Z *//**	  @return boolean true if RI is set*/JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_isRI	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    isRTS * Signature: ()Z *//**	  @return boolean true if RTS is set*/JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_isRTS	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    sendBreak * Signature: (I)V *//**	  Write to the port	  @param duration*/JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_sendBreak	(JNIEnv *, jobject, jint);/* * Class:     gnu_io_RXTXPort * Method:    writeByte * Signature: (I)V */JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_writeByte	(JNIEnv *, jobject, jint);/* * Class:     gnu_io_RXTXPort * Method:    writeArray * Signature: ([BII)V */JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_writeArray	(JNIEnv *, jobject, jbyteArray, jint, jint);/* * Class:     gnu_io_RXTXPort * Method:    nativeDrain * Signature: ()V */JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_nativeDrain	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    nativeavailable * Signature: ()I *//**	RXTXPort read methods*/JNIEXPORT jint JNICALL Java_gnu_io_RXTXPort_nativeavailable	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    readByte * Signature: ()I */JNIEXPORT jint JNICALL Java_gnu_io_RXTXPort_readByte	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    readArray * Signature: ([BII)I */JNIEXPORT jint JNICALL Java_gnu_io_RXTXPort_readArray	(JNIEnv *, jobject, jbyteArray, jint, jint);/* * Class:     gnu_io_RXTXPort * Method:    eventLoop * Signature: ()V *//**	Process SerialPortEvents*/JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_eventLoop	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    interruptEventLoop * Signature: ()V */JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_interruptEventLoop	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    nativeSetEventFlag * Signature: (IIZ)V *//**	  @param enable*/JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_nativeSetEventFlag	(JNIEnv *, jobject, jint, jint, jboolean);/* * Class:     gnu_io_RXTXPort * Method:    nativeClose * Signature: (Ljava/lang/String;)V *//**	Close the port*/JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_nativeClose	(JNIEnv *, jobject, jstring);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticSetSerialPortParams * Signature: (Ljava/lang/String;IIII)V */JNIEXPORT void JNICALL Java_gnu_io_RXTXPort_nativeStaticSetSerialPortParams	(JNIEnv *, jclass, jstring, jint, jint, jint, jint);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticSetDSR * Signature: (Ljava/lang/String;Z)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeStaticSetDSR	(JNIEnv *, jclass, jstring, jboolean);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticSetDTR * Signature: (Ljava/lang/String;Z)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeStaticSetDTR	(JNIEnv *, jclass, jstring, jboolean);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticSetRTS * Signature: (Ljava/lang/String;Z)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeStaticSetRTS	(JNIEnv *, jclass, jstring, jboolean);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticIsDSR * Signature: (Ljava/lang/String;)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeStaticIsDSR	(JNIEnv *, jclass, jstring);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticIsDTR * Signature: (Ljava/lang/String;)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeStaticIsDTR	(JNIEnv *, jclass, jstring);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticIsRTS * Signature: (Ljava/lang/String;)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeStaticIsRTS	(JNIEnv *, jclass, jstring);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticIsCTS * Signature: (Ljava/lang/String;)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeStaticIsCTS	(JNIEnv *, jclass, jstring);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticIsCD * Signature: (Ljava/lang/String;)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeStaticIsCD	(JNIEnv *, jclass, jstring);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticIsRI * Signature: (Ljava/lang/String;)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeStaticIsRI	(JNIEnv *, jclass, jstring);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticGetBaudRate * Signature: (Ljava/lang/String;)I */JNIEXPORT jint JNICALL Java_gnu_io_RXTXPort_nativeStaticGetBaudRate	(JNIEnv *, jclass, jstring);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticGetDataBits * Signature: (Ljava/lang/String;)I */JNIEXPORT jint JNICALL Java_gnu_io_RXTXPort_nativeStaticGetDataBits	(JNIEnv *, jclass, jstring);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticGetParity * Signature: (Ljava/lang/String;)I */JNIEXPORT jint JNICALL Java_gnu_io_RXTXPort_nativeStaticGetParity	(JNIEnv *, jclass, jstring);/* * Class:     gnu_io_RXTXPort * Method:    nativeStaticGetStopBits * Signature: (Ljava/lang/String;)I */JNIEXPORT jint JNICALL Java_gnu_io_RXTXPort_nativeStaticGetStopBits	(JNIEnv *, jclass, jstring);/* * Class:     gnu_io_RXTXPort * Method:    nativeGetParityErrorChar * Signature: ()B */JNIEXPORT jbyte JNICALL Java_gnu_io_RXTXPort_nativeGetParityErrorChar	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    nativeSetParityErrorChar * Signature: (B)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeSetParityErrorChar	(JNIEnv *, jobject, jbyte);/* * Class:     gnu_io_RXTXPort * Method:    nativeGetEndOfInputChar * Signature: ()B */JNIEXPORT jbyte JNICALL Java_gnu_io_RXTXPort_nativeGetEndOfInputChar	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    nativeSetEndOfInputChar * Signature: (B)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeSetEndOfInputChar	(JNIEnv *, jobject, jbyte);/* * Class:     gnu_io_RXTXPort * Method:    nativeSetUartType * Signature: (Ljava/lang/String;Z)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeSetUartType	(JNIEnv *, jobject, jstring, jboolean);/* * Class:     gnu_io_RXTXPort * Method:    nativeGetUartType * Signature: ()Ljava/lang/String; */JNIEXPORT jstring JNICALL Java_gnu_io_RXTXPort_nativeGetUartType	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    nativeSetBaudBase * Signature: (I)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeSetBaudBase	(JNIEnv *, jobject, jint);/* * Class:     gnu_io_RXTXPort * Method:    nativeGetBaudBase * Signature: ()I */JNIEXPORT jint JNICALL Java_gnu_io_RXTXPort_nativeGetBaudBase	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    nativeSetDivisor * Signature: (I)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeSetDivisor	(JNIEnv *, jobject, jint);/* * Class:     gnu_io_RXTXPort * Method:    nativeGetDivisor * Signature: ()I */JNIEXPORT jint JNICALL Java_gnu_io_RXTXPort_nativeGetDivisor	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    nativeSetLowLatency * Signature: ()Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeSetLowLatency	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    nativeGetLowLatency * Signature: ()Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeGetLowLatency	(JNIEnv *, jobject);/* * Class:     gnu_io_RXTXPort * Method:    nativeSetCallOutHangup * Signature: (Z)Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeSetCallOutHangup	(JNIEnv *, jobject, jboolean);/* * Class:     gnu_io_RXTXPort * Method:    nativeGetCallOutHangup * Signature: ()Z */JNIEXPORT jboolean JNICALL Java_gnu_io_RXTXPort_nativeGetCallOutHangup	(JNIEnv *, jobject);#ifdef __cplusplus}#endif#endif