/*-------------------------------------------------------------------------
|   rxtx is a native interface to serial ports in Java.
|   Copyright 1997-2000 by Trent Jarvi trentjarvi@yahoo.com.
|
|   This library is free software; you can redistribute it and/or
|   modify it under the terms of the GNU Library General Public
|   License as published by the Free Software Foundation; either
|   version 2 of the License, or (at your option) any later version.
|
|   This library is distributed in the hope that it will be useful,
|   but WITHOUT ANY WARRANTY; without even the implied warranty of
|   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
|   Library General Public License for more details.
|
|   You should have received a copy of the GNU Library General Public
|   License along with this library; if not, write to the Free
|   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
--------------------------------------------------------------------------*/
This is the INSTALL file for RXTX.  Sept 20 2000

If, while following the instructions, you find this file unclear or incorrect 
please make a note and email the details to trentjarvi@yahoo.com.  

1.  INSTALL INSTRUCTIONS IN OTHER LANGUAGES

	A. Japanese 

2.  BUILDING COMMAPI SUPPORT

	A.  Quick Install
	B.  Uninstalling Sun's comm.jar
	C.  installing javax.comm.properties.
	D.  Add comm.jar to your CLASSPATH.
	E.  Build and Install the jar.
	F.  Where did everything end up?
	G.  Cross Compiling for Win32 support

3.  COMMON PROBLEMS

	A.  java.lang.UnsatisfiedLinkError: nSetOwner while loading driver
	    gnu.io.RXTXCommDriver
	B.  Exception in thread "main" java.lang.UnsatisfiedLinkError: 
	    no Serial in java.library.path
	C.  I Can Not Open the Port.
	D.  java.lang.NoClassDefFoundError: javax/comm/CommPort
	E.  The Compiler Cannot Find Java Include Files
	F.  Configure says 'unterminated sed command' and stops 
	G.  Java Can Not Find libstdc++-libc6.0-1.so.2 
	H.  BlackBox Can Not Handle all the ports!
	I.  Illegal use of nonvirtal function call!
	J.  My libc5 Linux system is generating SIGSEGV
	K.  AM_PROG_LIBTOOL not found in library
	L.  Problems with RMISecurityManager()
	M.  Which Wires Should be Connected?
	N.  Which Device Should be Used?
	O.  It Did Not Work! 
	P.  Which jdk should be used? 

-------------------------------------------------------------------------------
1.  INSTALL INSTRUCTIONS IN OTHER LANGUAGES
A.  Japanese

	Instructions are available in Japanese at

	http://www.geocities.co.jp/Technopolis/4789/settei.htm#id1
	Thanks to Masayuki "Tencho" Yamashita <tencho@venus.kanazawa-it.ac.jp>
	home page http://www.geocities.co.jp/Technopolis/4789/ 

	A copy of these install instructions is provided in 
	install-japanese.html
	
	We will gladly include instructions in any language provided.  Tencho 
	was the first to contribute instructions in another language.

2.  BUILDING COMMAPI SUPPORT

	The following is concerned with building and installing commapi 
	support with Sun's CommAPI package.  A full stand alone version of 
	rxtx is in the CVS archive for interested developers.

	A.  Quick Install

	The following packages are used to build rxtx:

		autoconf-2.13
		automake-1.4a
		libtool-1.2f
		gnu make-3.77
		jdk 1.2+ or 1.1 	Preferably the native threads version of
		                        jdk. 

	With the packages installed, proceed to build and install rxtx.

		$ tar -xzvf rxtx-1.5.tar.gz
		$ cd rxtx-1.5
		$ ./configure  (follow the instructions)
		$ make install

	If that does not work or you do not want a script messing with the 
	system, read on..

	B.  Uninstalling Sun's comm.jar

		Sun's comm.jar is not required.  It is a valid option on
		some platforms.  IT WILL CREATE CHAOS if you have it installed
		while trying to build rxtx 1.5.

		http://java.sun.com/products/javacomm/index.html
		
	C.  Installing javax.comm.properties.

		javax.comm.properties is not currently required by rxtx-1.5

	D.  Add comm.jar to your CLASSPATH.

		jdk-1.1:

			make sure /usr/local/java/lib/comm.jar is in your
			CLASSPATH.  If you want to use apps that require
			comm.jar.

			in bash:

			$ export CLASSPATH=/usr/local/java/lib/comm.jar:.

		jdk-1.2 and newer:

			No changes are needed.

	E.  Build and Install the jar.

		make    	to build comm.jar and the libraries
		make install 	to place the jar and libraries in the correct 
		                location

	F.  Where did everything end up?

		Lets assume the top java directory is /usr/local/java

		jdk-1.2 the files go in
		
			/usr/local/java/jre/lib/ext/comm.jar
			/usr/local/java/jre/lib/$(ARCH)/libSerial.so.
			/usr/local/java/jre/lib/$(ARCH)/libParallel.so.
			/usr/local/java/jre/lib/$(ARCH)/lib/...

		jdk-1.1.* the files go in 

			/usr/local/java/lib/comm.jar
			/usr/lib/libSerial.so.
			/usr/lib/libParallel.so.
			/usr/lib/...

			The libSerial.so libParallel.so are placed in 
			/usr/lib so people don't have to change with their 
			LD_LIBRARY_PATH.

	G.  Cross Compiling for Win32 support

		Get the Sun CommAPI if you want a plug-in solution.  The code 
		is provided for people that may have demanding needs and coding
		ability. 

		Instructions unique to win32 builds.

		Grab ming32:

		Wayne Roberts has the version used by the maintainer.
		(Wayne is largely responsible for bringing rxtx back to win32.)
		ftp://24.1.180.14/pub

		I built the dll with jdk-1.2.2 for linux using jdk-1.2.2 
		include files from the win32 JDK.

		Make sure that ming32 bin dir is the first in your path (at 
		least before /usr/bin/gcc)

			$ export PATH=" \
				/usr/local/cross-tools/i386-mingw32/bin/: \
				$PATH:/usr/X11R6/bin:/usr/local/java/bin: \
				/usr/local/java/jre/bin/:"

		Place Sun jdk 1.2.2 win32 include files in a known location.

			$ mkdir /home/jarvi/win32java
			$ cp -r /mnt/win98//java/include /home/jarvi/win32java

			If your are developing win32 support you may want to
			export the location to make the config script 
			non interactive

			$ export WIN32INCLUDE=/home/jarvi/tools/win32-include

		run configure to generate a Makefile

			$ cd /home/jarvi/rxtx-*
			$ mkdir build
			$ cd build
			$ ../configure --target=i386-mingw32  \
				--host=i386-redhat-linux

		build the class files and dll.

			$ make

		the files will be located in

			rxtx-*/build/...

		If your looking at rxtx as an example of cross-compiling you 
		may be interested in looking at the examples provided at:

			ftp.xraylith.wisc.edu
			/pub/khan/gnu-win32/mingw32/misc/java-jni-examples.zip

3.  COMMON PROBLEMS

A.  I get java.lang.UnsatisfiedLinkError: nSetOwner while loading driver
    gnu.io.RXTXCommDriver when using rxtx.

	SetOwner appears to be some win32 call.
	Do not use the Sun's win32 CommAPI files.  Get the Solaris version.
	"javacomm20-x86.tar.Z" and rxtx-1.4 if you want Sun's solution.

	See Also: 2-B.  Installing Sun's comm.jar (IE its not needed at all)

B.  Exception in thread "main" java.lang.UnsatisfiedLinkError: no Serial in 
    java.library.path

	libSerial.so is located in the wrong directory.  Here is an example

	$ mv /usr/local/java/jre/lib/i386/libSerial* /usr/local/lib
	$ java BlackBox
	Exception in thread "main" java.lang.UnsatisfiedLinkError: no Serial in
	java.library.path
		at java.lang.ClassLoader.loadLibrary(Compiled Code)
		at java.lang.Runtime.loadLibrary0(Compiled Code)
		at java.lang.System.loadLibrary(Compiled Code)
		at gnu.io.NativePort.<clinit>(NativePort.java:32)
		at gnu.io.RXTXPort.<init>(Compiled Code)
		at gnu.io.RXTXCommDriver.getCommPort(Compiled Code)
		at javax.comm.CommPortIdentifier.open(Compiled Code)
		at SerialPortDisplay.openBBPort(Compiled Code)
		at SerialPortDisplay.<init>(Compiled Code)
		at BlackBox.addPort(Compiled Code)
		at BlackBox.main(Compiled Code)

		... lets fix it.

	$ mv /usr/local/lib/libSerial.* /usr/local/java/jre/lib/i386/

C.  I Can Not Open the Port.

	If your not able to open the port (read the errors carefully) then you 
	may not have permission to use the device.  Redhat Linux ships with the
	following permissions:

	crw-r--r--   /dev/ttyS?

	Users need to be able to read and write with serial communication...

	chmod 666 /dev/ttyS? 

	should fix the problem.  Be sure to check the file CommAPI for common 
	mistakes.

D.  java.lang.NoClassDefFoundError: javax/comm/CommPort

	comm.jar is probably not in your classpath or not located in
	the proper directory.

	for example, lets not include comm.jar

	export CLASSPATH=../java/lib/classes.zip
	$ java BlackBoxException in thread "main"
	java.lang.NoClassDefFoundError: javax/comm/CommPort

E.  The Compiler Cannot Find Java Include Files

	Check to top of the Makefile to make sure we agree on the location of
	the include files that came with the jdk.  Specifically:

	JAVAINCLUDE =  -I /usr/local/java/include/
	JAVANATINC =  -I /usr/local/java/include/genunix
	also check the classpath
	CLASSPATH = ...

F. Configure says 'unterminated sed command' and stops 

	Unterminated sed command errors usually result from `find` producing 
	unexpected results.   If you are unsure remove all comm.jar and 
	configure to place in in the correct place. 

G.  Java Can Not Find libstdc++-libc6.0-1.so.2 

	jdk-1.2 on redhat systems may note that Java complains about not being
	able to find libstdc++-libc6.0-1.so.2.  A symbolic link can be used to 
	get around this feature.

	ln -s /usr/lib/libstdc++ /usr/lib/libstdc++-libc6.0-1.so.2
	ls -l /usr/lib/libstdc++-libc6.0-1.so.2
 	/usr/lib/libstdc++-libc6.0-1.so.2 -> libstdc++.so.2.8.0

H.  BlackBox Can Not Handle all the ports!

	BlackBox has a hard coded limit in BlackBox.java that prevents it from 
	running if you don't specify a port.  We are considering alternative 
	ways of handling the large number of port names in Unix.  The line in 
	question

	is:

		portDisp = new SerialPortDisplay[50];
		
	just change 50 to say 256.

I.  Illegal use of nonvirtal function call!

	Exception in thread "main" java.lang.VerifyError: (class: 
	gnu/io/RXTXPort$SerialOutputStream, method: flush signature: ()V) 
	Illegal use of nonvirtual function call
		at gnu.io.RXTXCommDriver.getCommPort(Compiled Code)
		at javax.comm.CommPortIdentifier.open(Compiled Code)
		at SerialPortDisplay.openBBPort(Compiled Code)
		at SerialPortDisplay.<init>(Compiled Code)
		at BlackBox.addPort(Compiled Code)
		at BlackBox.main(Compiled Code)

	"1.1 compilers sometimes generate code that won't verify under 1.2.

	If you don't have the sources for the offending class to recompile with
	a 1.2 javac, the only solution I know of is to launch the VM with the
	-noverify option.

	Louis"

	In other words start with a fresh build directory, rebuild, and 
	reinstall to avoid the problem.

J.  My libc5 Linux system is generating SIGSEGV

	Older Linux Systems (libc5) should upgrade to a glibc system with 
	libpthread-0.7 or newer.  We have run into many problems with older 
	libraries.  SIGSEGV was the most common symptom.  Reported by  Peter 
	Bennett <bencom@bencom.co.nz>

K.  AM_PROG_LIBTOOL not found in library

	cd. && aclocal
	aclocal:configure.in: 23: macro 'AM_PROG_LIBTOOL' not found in library
	make:***[aclocal.m4]Error 1

	If your positive things are setup right you may try the autogen.sh 
	script to try regenerating the scripts with your tools.

L.  Problems with RMISecurityManager()

	Please see the file RMISecurityManager.html 

M.  Which Wires Should be Connected?

	With the DB25 use 2 (TX), 3 (RX) and 7 (GD) to connect to the device.
	With the DB9  use 2 (RX), 3 (TX) and 5 (GD) to connect to the device.

	You will need to hook up more than that for hardware flow control.

N.  Which Device Should be Used?

	Linux serial ports should use /dev/ttyS?
	specialx, cyclades and isdn4 linux have been reported to work.
	as many as 64 ports have worked at one time.
        FreeBSD uses cuaa?
	netbsd uses tty0?
	Irix  uses ttyd? ttym? ttyf?
	HP-UX uses tty0p? tty1p?
	BeOS uses /dev/ports/serial?
	Win32 uses COM?
  
O.  It Did Not Work! 

	There are sure to be bugs.  The goal is to make the install as painless
	as possible.  Send back comments if something could be easier.

	If you run into a problem building the rxtx package please include the
	output generated by the following script.

        ---------------clip-----------------
#!/bin/sh
which java
java -version
uname -a
autoconf --version
automake --version
libtool --version
make --version
        ---------------clip-----------------

	Here's what's on my system for comparison.  Older make is known to cause
	problems.

		java 1.2
   		autoconf 2.13
   		automake 1.4a
   		libtool 1.2f
   		make 3.77


	mail any bugs to trentjarvi@yahoo.com.  

P.  Which jdk should be used? 

	Ideally any jdk would be fine.  Here is a list of jdk's tried on
	RedHat 6.0/kernel 2.2.17pre13 with various versions of glibc.

                 Sun            IBM           Blackdown
                 2.1.2_006      1.3.0         1.1.8v1
                 green  native  green native  green native
                 ------------------------------------------
glibc-2.1.1-6   | OK   | *1   | *2   | *2   | OK   | *3   |
                -------------------------------------------
glibc-2.1.2-11  | OK   | *1   | OK   | OK   | OK   | OK   |
                -------------------------------------------
glibc-2.1.2-17  | OK   | *1   | OK   | OK   | OK   | OK   |
                -------------------------------------------
glibc-2.1.3-15  | OK   | *1   | OK   | OK   | OK   | OK   |
                -------------------------------------------

1)  BlackBox (a demo application shipped with CommAPI locks after multiple 
    open()/close()

2) java wont start "Unable to load /usr/local/java/jre/bin/libhpi.so: symbol
sem_wait, version GLIBC_2.1 not defined in file libpthread.so.0 with link time
reference Could not create the Java virtual machine."

3) java wont start "error in loading shared libraries:
/usr/local/java/bin/../lib/i686/native_threads/libjava.so: symbol sem_init,
version GLIBC_2.1 not defined in file libpthread.so.0 with link time reference"

conclusion?  avoid Sun's native threads unless you can figure out whats going
wrong.

You made it this far.. what is one more line.

Sun, Solaris and Java are registered trademarks of Sun Microsystems, Inc.
