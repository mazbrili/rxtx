
add ParallelPort support.
------------------
(from ndarlow@csi.com <Neil Darlow>)

Trent,

Following on from my posting re. event notification support under kernel 2.0.36 
would you consider the following observations/suggestions?

[ 1) is partially implemented now with --enable-EVENT/--enable-FULL_EVENT
I'm sure some bugs will show up.  jarvi@ezlink.com ]

1) Your current event notification scheme uses features not available to
current production kernels e.g. information relating to parity, framing and
overrun errors.

While error notification is important, it isn't essential. Couldn't the build
options for RXTX be set at two levels e.g. support of event notifications for
(a) received data/modem status register deltas and (b) error conditions.

This would allow current production kernels to provide a good deal of event
notification functionality (sufficient to implement efficient data and modem
monitoring) with an upgrade path to full event notification with 2.2.x kernels
later.


[ No work has been done here.  Its next on the list jarvi@ezlink.com ]

2) Multi-port handling isn't particularly well catered for at present due to
the single-threaded nature of the implementation.

The use of pthreads might be beneficial here. On opening each port, a thread
could be created and a select() call used to wait for incoming data. Event
notifications could be posted on leaving the select() call.

This mechanism would effectively replace your RXMonitor class and eliminate the
need for RXTX to consume Java threads for this purpose. You could also
implement the receive timeout functionality through the threads/select() call
approach e.g. normally wait indefinitely for data but kill/start a new thread
and set a receive timeout on transmit operations.

These changes could make JCL/RXTX a little more portable. Most implementations
of *nix support threads and I think the ability to have some event notifications
with current production kernels would be beneficial.

Regards,
Neil Darlow (UK).




SerialImp.c/RXTXPort.java
   notifyOnOutputEmpty  Wayne Roberts is looking into these

   input and output buffer sizes are set but not used in SerialImp.c.
   receiveframing byte is set but not used in SerialImp.c

fix the FIXMEs.  (see SerialImp.c for a nice place to hack)
Many are trivial.

SerialImp.c
   tcsendbreak                send 0 bytes for actual time or >= 0.25 secFIXME
   writeBytes                 write offset zeros.  write length bytes    FIXME
   dumptermios                transfer termios from java to native       FIXME
   filltermios                transfer termios data from native to java  FIXME
   
Open fails are reported from comm api as "port is in use by unknown solaris application"  Thats a problem in commapi.
 
   
Use the FD class as intended.  
   See FD.java
   can it be done?

Figure out how to use the security stuff properly.
  see SerialInputStream.java SerialOutputStream.java
  can it be done?

Add more documentation.
